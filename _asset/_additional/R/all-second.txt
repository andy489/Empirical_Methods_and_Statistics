?lines 
# приема вектор от Х и вектор от У и ги свързва

lines(c(0, 7), c(1/6, 1/6), col = "red")

x<-sample(x=1:6, size=100, replace=TRUE)
mean(x)
barplot(table(x) / length(x))
lines(c(0, 7), c(1/6, 1/6), col = "red") # probability mass function of X


# -------

# Как броят точки които хвърляме средно със зарче клонят към ЕХ постепенно

n <- 5000
x <- sample(1:6, n, replace = TRUE); x[1:10]
# xx<-cumsum(x);xx[5000] # събира броя точки от всяко хвърляне до 17303 на края
m <- cumsum(x) / 1:n; m[1500:2000] # от 5 започват да клонят към ЕХ

k <- 50
plot(m[1:k], ylab = "Average", type = "o") # как клонят първите k тегления към ЕХ
lines(c(0, k), c(3.5, 3.5), col = "red")

# Как броят 6ци които сме хвърлили клони постепенно към теоретичната вероятност

n <- 5000
x <- sample(1:6, n, replace = TRUE); x[1:20]
propSixes <- cumsum(x == 6) / 1:n; propSixes[1:20] 
# x == 6 дава вектор от 0 и 1 и cumsum ни дава към дадено хвърляне броя на 6ците до него вкл

k <- 500
plot(propSixes[1:k], ylab = "Relative frequency", type = "l") # type= "ел"
lines(c(0, k), c(1/6, 1/6), col = "red")

# ----

x <- sample(1:6, size=10^5, replace = TRUE)

# разпределение на точките от хвърляне на 1 зар спрямо 
# density на нормалното разпределение

plot(1:6, table(x) / length(x),
     xlab = "", ylab = "Probability", ylim = c(0, 0.25),
     type = "h", lwd = 3, col = "#7B68EE")
points(1:6, table(x) / length(x),
        type = "p", lwd = 3, col = "#7B68EE")
m <- (1 + 6) / 2 # EX - # mean(x) клони към това тъй като size e голямо
v <- ((6 - 1 + 1)^2 - 1) / 12 #DX # var(x) клони към това
curve(dnorm(x, m, sqrt(v)),
       add = TRUE, col = "black", lwd = 2)

# разпределение на точките от хвърляне на 2 зарa спрямо 
# density на нормалното разпределение

d1 <- sample(1:6, 10^5, replace = TRUE)
d2 <- sample(1:6, 10^5, replace = TRUE)
x <- d1 + d2
barplot(table(x) / length(x),
         main = "Sum of the points on 2 dice",
         col = c("#1874CD"))


plot(2:12, table(x) / length(x),
     xlab = "", ylab = "Probability", ylim = c(0, 0.2),
     type = "h", lwd = 3, col = "#1874CD")
points(2:12, table(x) / length(x),
     type = "p", lwd = 3, col = "#1874CD")
curve(dnorm(x, 2 * m, sqrt(2 * v)),
     add = TRUE, col = "black", lwd = 2)

# разпределение на броя 6ци в зависимост от броя хвръляния
# при по-голямо n се приближава към равномерното разпределение
n <- 50; p <- 1/6
x <- rbinom(10^5, n, p)
barplot(table(x) / length(x),
         main = "Number of 6's in 5 rollings of a dice",
         col = c("#7B68EE"))

plot(0:(length(table(x)) - 1), table(x) / length(x),
     xlab = "", ylab = "Probability", ylim = c(0, 0.5),
     type = "h", lwd = 3, col = c("#7B68EE"))
points(0:(length(table(x)) - 1), table(x) / length(x),
     type = "p", lwd = 3, col = c("#7B68EE"))
curve(dnorm(x, n * 1 / 6, sqrt(n * 5 / 36)),
     add = TRUE, col = "black", lwd = 2)


# 5000 пъти симулираме 3 сл. вел.с норм. разпределение и да сравним нормализираното средно с
# standard normal N(0,1) probability density function

n <- 3; mu <- 2; sigma <- 5
result <- 0
for(i in 1:5000){
   X <- rnorm(n, mu, sigma)
   result[i] = (mean(X) - mu) / (sigma / sqrt(n))
}
hist(result, probability = TRUE)
x <- seq(from = -3, to = 3, by = 0.1)
y <- dnorm(x, mean = 0, sd = 1)
lines(x, y, col = "red", type = "l")


# 5000 пъти симулираме 10 сл. вел. с експоненциално разпределение и да сравним нормализираното средно с
# standard normal N(0,1) probability density function

lambda <- 0.5
nSum <- 10; mu <- 1/lambda; sigma <- 1/lambda
result <- 0
for(i in 1:5000){
     x <- rexp(nSum, lambda)
     result[i] <- (mean(x) - mu) / (sigma / sqrt(nSum))
}
hist(result, probability = TRUE)
x <- seq(from = -3, to = 3, by = 0.1)
y <- dnorm(x, mean = 0, sd = 1)
lines(x, y, col = "red", type = "l")




# pp plot

x <- rnorm(100, 3, 4)
xCoord <- 0:99 / 100
y <- pnorm(sort(x), mean(x), sd(x))
plot(xCoord, y, col = "#1874CD")
lines(xCoord, xCoord, lwd = 2)


x <- rexp(100, 3)
1/mean(x)
xCoord <- 0:99 / 100
y <- pexp(sort(x), rate=1/mean(x))
plot(xCoord, y, col = "#1874CD")
lines(xCoord, xCoord, lwd = 2)

# qq plot

# можем да си я напишем сами
x <- rnorm(n=1000, mean=3, sd=4)
z <- (x - 3) / 4
y <- qnorm(p = 0:999 / 1000, mean = 0, sd = 1)
plot(sort(z), y, ylim = c(-3, 3), xlim = c(-3, 3), col = "#1874CD")
xCoord <- seq(from = -3, to = 3, length.out = 1000)
lines(xCoord, xCoord, lwd = 2)

# за нормално разпределение
x <- rnorm(1000, 3, 4)
qqnorm(x)
qqline(x)

?qqnorm
?qqline

# за други разпределения

install.packages("StatDA")
library(StatDA)

?qqplot.das

x <- rnorm(1000, 3, 4)
qqplot.das(x,"norm")

x <- rexp(1000, 1/3)
qqplot.das(x, "exp")

x<-rgamma(1000, rate=1, shape=2)
qqplot.das(x, "gamma", shape=2)

x<-rpois(1000, 5)
qqplot.das(x, "pois", lambda=5)

x<-rbinom(10000, 5, 1/6)
qqplot.das(x, "binom", size=5, prob=1/6)

x<-rnbinom(10000, 5, 1/6)
qqplot.das(x, "nbinom", size=5, prob=1/6)

x <- rexp(300, 10)
qqplot.das(x, "norm", col = palette()[4])


x <- rt(100, df=3)
qqplot(rt(1000,df=3), x,
        main="t(3) Q-Q Plot",
        ylab="Sample Quantiles")
abline(0,1)

x <- rt(100, df=3)
qqplot(x, rt(1000,df=3),
       main="t(3) Q-Q Plot",
       ylab="Sample Quantiles")
abline(0,1)

x <- runif(100, min=0, max=10)
qqplot(rt(1000,df=3), x,
       main="t(3) Q-Q Plot",
       ylab="Sample Quantiles")
abline(0,1)



d1<-rnorm(100, mean = 2, sd = 3)
normDistr<-rnorm(100, mean = mean(d1), sd = sd(d1))
qqplot(d1,normDistr)
abline(a=0, b= 1)

d2<-rexp(100, rate=1/3)
expDistr<-rexp(100, rate=1/mean(d2))
qqplot(d2, expDistr)
abline(a=0, b = 1)

